Release notes for version 1.0.138:

Please plan on installing the following firmware as soon as you change to the wifi MCU:
   https://jfcenterprises.cloudant.com/transfer/hive-1.0.138/hive.bin

   It's the same process as before to place the firmware on the MCU module.  Download the file,
   connect your PC to the USB, put the MCU in firmware upload mode (double-press the tiny button
   next to the USB connector), then run the bossac program as before.

   I think I've written about this process a couple times; here's one of them:
     https://docs.google.com/document/d/1W1DZwI7sake5m6TDdBS6u3deZZ_eG_eNkR4GXV3UOy4/edit


Also, please update the Android app.  They work together, and must be in sync.  The Google Play
Store link for alpha access is:  https://play.google.com/apps/testing/com.jfc.apps.hive



Things to be aware of:

Motor User Interface changes:
  I've changed it because it was always confusing to see the App report some distance, with a
  big lag, without any certainty that it was meaningful anyway.  If you wish to turn this
  system into an autonomous one, it *must* know about the location of the object being moved.
  But until then, and while it's in prototyping, I think we're better off assuming you're
  there watching it.  And if you're watching it, it's not important that the app know exactly
  where it is -- cause you can see it!  So, instead, the app just knows and indicates when
  the motor should be moving, and it locks out attempts to move it while it should already
  be moving.  Hopefully, this will clear up the confusion this was obviously causing, and we
  can improve it at a later stage to make it ready for autonomous use.
  
Provisioning and the Indicator LED:
  On the MCU module, as on the BLE one, there's a red LED near the USB connector.  That's being
  used as an indicator for situations where the firmware has no other way to tell you something.
  Specifically, you'll see these patterns:
     - Long slow flashing:
            Means it is in AP-Mode (Access Point Mode).  When in this mode, it doesn't have
	    Wifi or db credentials to do any communication with the App.  There's only one
	    thing you can do; you must change your Android's wifi connection to connect to
	    the SSID "HIVEWIZ_192.168.1.1".  Once connected, open up Chrome and got to url:
	    http://192.168.1.1 and you'll see a web page that will ask you to enter some
	    info.  You probably just need to provide your Wifi's SSID and password, then click
	    Save.  It should then proceed to shutdown the AP, and connect to your Wifi.  If
	    it still cannot do so, for whatever reason, it will try for a while (2 minutes,
	    I think), then go back to AP-Mode.  Note, as always, passwords are case-sensitive.
     - Fast flashing:
            It is trying to connect...  it will either end with connection and the next state, or
	    go back to the Long-slow flashing above.
     - Heartbeat flashing: (quick flash, once per second)
            This means all is good; it's online and communicating both to and from the db.
     - None of the above:
            This means something happened that is completely unanticipated, and fatal.  You
	    will almost certainly need to reset the MCU to recover (one press on the tiny
	    button next to the USB connector), and you might even have to power-cycle
	    everything as well.  Note that some failures in this category cannot be fixed
	    by just a reset.  For example, the sd card communications can get corrupted;
	    when this happens the little circuit on the sdcard itself needs to be reset, and
	    that can only be done by power cycling.
	    
	    If this happens, there's a good chance (depending on what exactly happened) that 
	    my firmware was able to trap some info about the problem.  If so, it will have
	    written a file to the Sd card, and on next run it will upload that file to the
	    db for my analysis.


Known Issues:
     - Latch (Servo) isn't currently enabled -- it hasn't been converted from the BLE version yet
     - There's an annoying delay (often, but not always) when the MCU tries to access the db.
       Sometimes it will seem very responsive to what's done on the app; other times it might
       take as much as 10s.  This is because every attempt to communicated with the db
       involves starting from scratch on the wifi connection, http request to the db, read/write
       from the db, then shutdown everything in reverse.  I'd rather leave the wifi connection
       active indefinitely, but I had trouble early on with it getting into a bad state that I
       couldn't recover from.  Now that nearly everything is functional, I'm tempted to revisit
       this question.  I'm optimistic the wifi connection can remain indefinitely, and then
       all the activity will seem very responsive.  I'll be trying in the next day or so.
     - Beecounter: because of that problem I mentioned with the wifi delays, the beecounter
       sometimes doesn't poll the sensors frequently enough to catch all transitions.  Solving
       the wifi delay will solve this problem
     - Another problem with the Beecounter is that I do not currently have a working BeeCount
       circuit -- I sent you the only one I had after I burned myself!  So, my conversion of
       the code to move to Wifi could have introduced bugs that I cannot see.  I'll have to
       build another one here before I can be certain, and I'm not sure you can be certain
       from your end since the numbers will always be a bit "fuzzy".
     - The StepperMotors still suffer from a troublesome driver approach.  They run a bit
       unevenly (easier to tell by the vibration than by watching), speeds aren't very precise,
       and they consume quite a bit of the MCU's cpu cycles (also distracting from things like
       the beecounter).  I have a working solution to this that I'm not done testing yet.  In
       fact, the Adafruit library developers took a shortcut -- there's a chip on the
       motor driver shield that can handle almost all the work, requiring just a startup and
       stop instruction from the MCU.  Instead, they wrote their library to have the MCU talk
       to the motor drive circuit for *every* step -- and there are 200 per revolution, per
       motor!
     - The Wifi Provisioning that I described above is messy...  for production something more
       sophisticated should be developed, but this should serve for prototype.
     - I'm sure your testing will find other issues!

